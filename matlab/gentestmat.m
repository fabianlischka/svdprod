% $Id$

As      = { '-triu( ones( N ) ) + 2 * diag( ones( N, 1 ) )', 
                'uppertriang, structured, eval = 1, only 1 evect, bad condition';
            'triu( 10*rand( N ) - 1 ) - 20 * diag( ones( N, 1 ) )',
                'uppertriang, large negative diag';
            'rand( N )',
                'elements uniformly random 0..1';
            'exp(16*rand(N)-15).*(rand(N)-.5)',  
                'elements of very different size';
            'U* diag(2.^(-1:-1:-N)) *V',         
                'very different singular values: 1/2 .. 1/(2^N)';
            'repmat( randn(N,1), 1, N ) + 1e-15*rand(N)', 
                'rank 1 matrix with slight disturbances';
            'U* ( diag(1e-10*ones(N,1)) + diag(ones(N-1,1),1) ) * transpose(U)'
                '1 small eval, one evect';
            'U* ( diag(1e+10*ones(N,1)) + diag(ones(N-1,1),1) ) * transpose(U)'
                '1 big   eval, one evect';
          };
          
% generate test matrix type k, size N
k = 7;
N = 40;

% produce some random orthogonal matrices
[U,X]=qr(rand(N));
[V,X]=qr(rand(N));

disp( sprintf( '\nGenerating %d x %d matrix, type %d (%s): generated by\n %s:\n', N, N, k, As{k*2}, As{ k*2-1 } ) );
A = eval( As{ k*2-1 } );
